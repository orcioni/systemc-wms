// ideal:
// Copyright (C) 2004-2013 Giorgio Biagetti and Simone Orcioni
/*
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#ifndef IDEAL_H
#define IDEAL_H

#include "sys/wave_basics"

// Library of ideal circuits:
//
//
template <class T1, class T2> struct transducer;
template <class T> struct transformer;
template <class T> struct gyrator;
//template <class T> struct amplifier;
template <class T> struct TCTS;
template <class T> struct load;

// Declaration of class load:

template <class T1>
struct load : wave_module<1, T1>
{
	SC_HAS_PROCESS(load);
	enum type {adapted, open, shunt};
	load (sc_core::sc_module_name name, type t = adapted);
	load (sc_core::sc_module_name name, double resistance);
private:
	void setup ();
	void calculus ();
	double reflection;
};

// Implementation of class load:

template <class T> load<T>::load (sc_core::sc_module_name name, type t)
{
	switch (t) {
	case adapted : reflection =  0; break;
	case open    : reflection = +1; break;
	case shunt   : reflection = -1; break;
	}
	SC_METHOD(calculus);
	this->sensitive << this->activation;
}

template <class T> load<T>::load (sc_core::sc_module_name name, double resistance)
{
	// Temporary store resistance into reflection and then call setup
	// to convert the value once the channel normalization resistance is known:
	reflection = resistance;
	SC_METHOD(setup);
	this->sensitive << this->activation;
}

template <class T> void load<T>::setup ()
{
	const double P0 = this->port->get_normalization();
	reflection = (reflection - P0) / (reflection + P0);
	calculus();
}

template <class T> void load<T>::calculus ()
{
	this->port->write(reflection*this->port->read());
}


// Declaration of class transducer

template <class T1, class T2>
    struct transducer : wave_module<2, T1, T2>
{
  typedef wave_module<> base_class;
    SC_HAS_PROCESS(transducer);
    ab_port<T1> &primary;
    ab_port<T2> &secondary;
    transducer(sc_core::sc_module_name name, cfg::transducer_type type,  double ratio, double Rp, double Rs);
  //transducer(sc_core::sc_module_name name, cfg::transducer_type type, double ratio); // ratio = Ns/Np
  // transducer(sc_core::sc_module_name name, cfg::transducer_type type); // ratio = sqrt(R0s/R0p)
    private:
    void calculus ();
    void calculusbs ();
    const double ratio;
    const double Rp, Rs;
};

// Implementation of class transducer


template <class T1, class T2> transducer<T1, T2> :: transducer (sc_core::sc_module_name name, cfg::transducer_type type, double ratio, double Rp, double Rs) : primary(base_class::port<T1>(1)), secondary(base_class::port<T2>(2)), ratio(ratio), Rp(Rp), Rs(Rs)
{
	SC_THREAD (calculus);
	this->sensitive << this->activation;

	// set port normalization;
	primary <<= Rp;
	secondary <<= Rs;
}

template <class T1, class T2> void transducer<T1, T2>:: calculus()
{	
	const double R0p = primary -> get_normalization();
	const double R0s = secondary -> get_normalization();
	const double sqrt_R0p = primary -> get_normalization_sqrt();
	const double sqrt_R0s = secondary -> get_normalization_sqrt();
	const double c = 1/(ratio*ratio*R0s + R0p);
	while (true) {
		typename T1::wave_type a1 = primary -> read();
		typename T2::wave_type a2 = secondary -> read();
		typename T1::wave_type b1 = c * (a1 * (ratio * ratio * R0s - R0p) + a2 * 2 * ratio * sqrt_R0s * sqrt_R0p);
		typename T2::wave_type b2 = c * (a1 * 2 * ratio * sqrt_R0s * sqrt_R0p - a2 * (ratio * ratio * R0s - R0p));
		primary -> write(b1);
		secondary -> write(b2);
		wait(); // wait 'activation' event;
	}
}



//	Declaration of class TCTS
template <class T>
struct TCTS : wave_module<2, T>
{
    SC_HAS_PROCESS(TCTS);
    TCTS (sc_core::sc_module_name name, double constant);
   
private:
	void calculus ();
	const double K;
};
 
//	Implementation of class TCTS:

template <class T> TCTS<T>::TCTS (sc_core::sc_module_name name, double constant) :  K(constant)
{
	SC_METHOD(calculus);
	this->sensitive << this->activation;
	
}

template <class T> void TCTS<T>::calculus ()
{
	
		typename T::wave_type a1 = this->port[0]->read();
		typename T::wave_type a2 = this->port[1]->read();
	  	typename T::wave_type b1 = - a1;
	  	typename T::wave_type b2 = a2 - 2*K*a1;
	  	this->port[0]->write(b1);
	  	this->port[1]->write(b2);
}


// Declaration of class transformer

template <class T>
struct transformer : wave_module<2, T>
{
  SC_HAS_PROCESS(transformer);
  transformer(sc_core::sc_module_name name, double ratio, double Rp = 1, double Rs = 1); // ratio = N:1
  ab_port<T> &primary;
  ab_port<T> &secondary;
private:
    void calculus();
    double ratio, Rp, Rs;
};

/* Implementation of class transformer

template <class T> transformer<T> :: transformer (sc_core::sc_module_name name, double ratio, double Rp, double Rs) : primary(port<T>(1)), secondary(port<T>(2)), ratio(ratio), Rp(Rp), Rs(Rs) 
{
	SC_THREAD (calculus);
	this->sensitive << this->activation;

	// set port normalization;
	primary <<= Rp;
	secondary <<= Rs;
}

template <class T> void transformer<T>:: calculus()
{	
	const double R0p = primary -> get_normalization();
	const double R0s = secondary -> get_normalization();
	const double sqrt_R0p = primary -> get_normalization_sqrt();
	const double sqrt_R0s = secondary -> get_normalization_sqrt();
	const double c = 1/(ratio*ratio*R0s + R0p);
	while (true) {
		typename T::wave_type a1 = primary -> read();
		typename T::wave_type a2 = secondary -> read();
		typename T::wave_type b1 = c * (a1 * (ratio * ratio * R0s - R0p) + a2 * 2 * ratio * sqrt_R0s * sqrt_R0p);  
		typename T::wave_type b2 = c * (a1 * 2 * ratio * sqrt_R0s * sqrt_R0p - a2 * (ratio * ratio * R0s - R0p));
		primary -> write(b1);
		secondary -> write(b2);
		wait(); // wait 'activation' event;
	}
}
*/

#endif // IDEAL_H